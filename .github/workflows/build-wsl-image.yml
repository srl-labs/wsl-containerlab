name: Check, Release, Build and Publish WSL2 Image

on:
  schedule:
    # Run daily at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    # Allow manual triggering
  release:
    types: [created, published, edited]

permissions:
  contents: write

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    # Skip this job if triggered by a release event
    if: github.event_name != 'release'
    outputs:
      NEED_RELEASE: ${{ steps.release.outputs.NEED_RELEASE }}
      NEW_TAG: ${{ steps.release.outputs.NEW_TAG }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to get tags

      - name: Get latest containerlab version
        id: containerlab
        run: |
          # Fetch the latest release information from containerlab repository
          CONTAINERLAB_LATEST=$(curl -s https://api.github.com/repos/srl-labs/containerlab/releases/latest | jq -r .tag_name)
          echo "CONTAINERLAB_VERSION=${CONTAINERLAB_LATEST#v}" >> $GITHUB_OUTPUT
          echo "Latest containerlab version: ${CONTAINERLAB_LATEST#v}"

      - name: Get latest WSL release version
        id: current_release
        run: |
          # Get the latest release tag from this repository
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

          if [[ "$LATEST_TAG" == "none" ]]; then
            echo "No releases found"
            echo "CURRENT_CONTAINERLAB_VERSION=none" >> $GITHUB_OUTPUT
            echo "CURRENT_WSL_VERSION=none" >> $GITHUB_OUTPUT
          else
            # Parse the version (format: 0.65.1-1.0)
            CURRENT_CONTAINERLAB_VERSION=$(echo $LATEST_TAG | cut -d'-' -f1)
            CURRENT_WSL_VERSION=$(echo $LATEST_TAG | cut -d'-' -f2)
            echo "CURRENT_CONTAINERLAB_VERSION=$CURRENT_CONTAINERLAB_VERSION" >> $GITHUB_OUTPUT
            echo "CURRENT_WSL_VERSION=$CURRENT_WSL_VERSION" >> $GITHUB_OUTPUT
            echo "Current containerlab version: $CURRENT_CONTAINERLAB_VERSION"
            echo "Current WSL version: $CURRENT_WSL_VERSION"
          fi

      - name: Determine if release is needed
        id: release
        run: |
          NEED_RELEASE="false"
          NEW_WSL_VERSION="1.0"

          # Check if containerlab version is different
          if [[ "${{ steps.current_release.outputs.CURRENT_CONTAINERLAB_VERSION }}" != "${{ steps.containerlab.outputs.CONTAINERLAB_VERSION }}" ]]; then
            NEED_RELEASE="true"
          elif [[ "${{ steps.current_release.outputs.CURRENT_CONTAINERLAB_VERSION }}" == "none" ]]; then
            # No previous releases
            NEED_RELEASE="true"
          fi

          # Set output variables
          echo "NEED_RELEASE=$NEED_RELEASE" >> $GITHUB_OUTPUT
          echo "NEW_TAG=${{ steps.containerlab.outputs.CONTAINERLAB_VERSION }}-$NEW_WSL_VERSION" >> $GITHUB_OUTPUT

          if [[ "$NEED_RELEASE" == "true" ]]; then
            echo "Release needed: ${{ steps.containerlab.outputs.CONTAINERLAB_VERSION }}-$NEW_WSL_VERSION"
          else
            echo "No release needed. Latest containerlab version already supported."
          fi

      - name: Create Release Tag
        if: steps.release.outputs.NEED_RELEASE == 'true'
        run: |
          git config --local user.email "github-actions@github.com"
          git config --local user.name "GitHub Actions"
          git tag -a ${{ steps.release.outputs.NEW_TAG }} -m "Release ${{ steps.release.outputs.NEW_TAG }}"
          git push origin ${{ steps.release.outputs.NEW_TAG }}

      - name: Create GitHub Release
        if: steps.release.outputs.NEED_RELEASE == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release.outputs.NEW_TAG }}
          name: "Release ${{ steps.release.outputs.NEW_TAG }}"
          body: "WSL2 image for containerlab version ${{ steps.containerlab.outputs.CONTAINERLAB_VERSION }}\n\nThis release was automatically generated based on the latest containerlab release."
          draft: false
          prerelease: false

  build-and-publish:
    runs-on: ubuntu-22.04
    # Run this job if triggered by a release event or if the check-and-release job completed successfully
    # The needs clause is conditional to avoid dependency on a job that might be skipped
    needs: [check-and-release]
    if: >
      github.event_name == 'release' ||
      (github.event_name != 'release' && needs.check-and-release.outputs.NEED_RELEASE == 'true')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker build . --tag clab-wsl-debian

      - name: Run Docker Container and Export Filesystem
        run: |
          # Run the Docker container
          docker run -t --name wsl_export clab-wsl-debian ls /
          # Export the container's filesystem to a tar file
          docker export wsl_export -o clab.tar
          # Remove the container to clean up
          docker rm wsl_export

      - name: Rename tar to .wsl file
        run: |
          # Rename the tar file to have a .wsl extension
          mv clab.tar clab.wsl

      - name: Upload WSL Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: clab-wsl2
          path: clab.wsl

      - name: Get release tag
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # For releases triggered by the release event
            REF_NAME="${{ github.ref }}"
            TAG="${REF_NAME#refs/tags/}"
            echo "Using release tag: $TAG"
            echo "TAG=$TAG" >> $GITHUB_OUTPUT
          else
            # For releases created by the check-and-release job
            echo "Using new tag: ${{ needs.check-and-release.outputs.NEW_TAG }}"
            echo "TAG=${{ needs.check-and-release.outputs.NEW_TAG }}" >> $GITHUB_OUTPUT
          fi

      - name: Upload Release Asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: clab.wsl
          asset_name: clab-${{ steps.get_tag.outputs.TAG }}.wsl
          tag: ${{ steps.get_tag.outputs.TAG }}